import React, { useState } from 'react';
import { Upload, FileText, Mic, Image, Download, CheckCircle, AlertTriangle, XCircle, Loader } from 'lucide-react';

interface FactCheckResult {
  id: string;
  content: string;
  credibilityScore: number;
  status: 'verified' | 'questionable' | 'false';
  sources: string[];
  explanation: string;
  timestamp: Date;
  fileType: 'text' | 'voice' | 'image';
  fileName?: string;
}

const FactChecker: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'text' | 'voice' | 'image'>('text');
  const [textInput, setTextInput] = useState('');
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [results, setResults] = useState<FactCheckResult[]>([]);

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>, type: 'voice' | 'image') => {
    const file = event.target.files?.[0];
    if (file) {
      setUploadedFile(file);
    }
  };

  const simulateFactCheck = async (content: string, type: 'text' | 'voice' | 'image', fileName?: string) => {
    setIsAnalyzing(true);
    
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Generate mock result
    const credibilityScore = Math.floor(Math.random() * 100);
    let status: 'verified' | 'questionable' | 'false';
    
    if (credibilityScore >= 70) status = 'verified';
    else if (credibilityScore >= 40) status = 'questionable';
    else status = 'false';

    const mockResult: FactCheckResult = {
      id: Date.now().toString(),
      content: content.substring(0, 100) + (content.length > 100 ? '...' : ''),
      credibilityScore,
      status,
      sources: [
        'Reuters Fact Check',
        'Associated Press',
        'Snopes.com',
        'PolitiFact'
      ],
      explanation: `Based on our analysis, this ${type} content has been cross-referenced with multiple trusted sources. The credibility score of ${credibilityScore}% indicates ${status === 'verified' ? 'high reliability' : status === 'questionable' ? 'mixed evidence' : 'potential misinformation'}.`,
      timestamp: new Date(),
      fileType: type,
      fileName
    };

    setResults(prev => [mockResult, ...prev]);
    setIsAnalyzing(false);
  };

  const handleSubmit = async () => {
    if (activeTab === 'text' && textInput.trim()) {
      await simulateFactCheck(textInput, 'text');
      setTextInput('');
    } else if (uploadedFile) {
      const content = `Uploaded ${activeTab} file: ${uploadedFile.name}`;
      await simulateFactCheck(content, activeTab, uploadedFile.name);
      setUploadedFile(null);
    }
  };

  const downloadResult = (result: FactCheckResult) => {
    const reportContent = `
TruthLens Fact-Check Report
==========================

Content: ${result.content}
File Type: ${result.fileType}
${result.fileName ? `File Name: ${result.fileName}` : ''}
Credibility Score: ${result.credibilityScore}%
Status: ${result.status.toUpperCase()}
Analysis Date: ${result.timestamp.toLocaleString()}

Explanation:
${result.explanation}

Sources Consulted:
${result.sources.map(source => `â€¢ ${source}`).join('\n')}

Generated by TruthLens AI Fact-Checking Platform
    `.trim();

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `truthlens-report-${result.id}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'verified':
        return <CheckCircle className="w-5 h-5 text-green-400" />;
      case 'questionable':
        return <AlertTriangle className="w-5 h-5 text-yellow-400" />;
      case 'false':
        return <XCircle className="w-5 h-5 text-red-400" />;
      default:
        return null;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'verified':
        return 'from-green-500/20 to-emerald-500/20 border-green-400/30';
      case 'questionable':
        return 'from-yellow-500/20 to-orange-500/20 border-yellow-400/30';
      case 'false':
        return 'from-red-500/20 to-pink-500/20 border-red-400/30';
      default:
        return 'from-gray-500/20 to-gray-600/20 border-gray-400/30';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800 py-12 px-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl md:text-5xl font-bold text-white mb-4">
            AI Fact Checker
          </h1>
          <p className="text-xl text-white/80 max-w-3xl mx-auto">
            Upload text, voice recordings, or images to verify their authenticity and get detailed credibility reports
          </p>
        </div>

        {/* Input Section */}
        <div className="bg-white/10 backdrop-blur-sm rounded-3xl p-8 border border-white/20 mb-8">
          {/* Tab Navigation */}
          <div className="flex flex-wrap gap-2 mb-8">
            {[
              { key: 'text', label: 'Text Analysis', icon: FileText },
              { key: 'voice', label: 'Voice Analysis', icon: Mic },
              { key: 'image', label: 'Image Analysis', icon: Image }
            ].map(({ key, label, icon: Icon }) => (
              <button
                key={key}
                onClick={() => setActiveTab(key as any)}
                className={`flex items-center space-x-2 px-6 py-3 rounded-full font-medium transition-all duration-300 ${
                  activeTab === key
                    ? 'bg-gradient-to-r from-cyan-400 to-blue-500 text-white shadow-lg'
                    : 'bg-white/10 text-white/80 hover:bg-white/20'
                }`}
              >
                <Icon className="w-4 h-4" />
                <span>{label}</span>
              </button>
            ))}
          </div>

          {/* Input Forms */}
          <div className="space-y-6">
            {activeTab === 'text' && (
              <div>
                <label className="block text-white font-medium mb-3">
                  Enter text to fact-check
                </label>
                <textarea
                  value={textInput}
                  onChange={(e) => setTextInput(e.target.value)}
                  placeholder="Paste the text, claim, or statement you want to verify..."
                  className="w-full h-32 bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-white/50 focus:outline-none focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/20 resize-none"
                />
              </div>
            )}

            {activeTab === 'voice' && (
              <div>
                <label className="block text-white font-medium mb-3">
                  Upload audio file for analysis
                </label>
                <div className="border-2 border-dashed border-white/30 rounded-xl p-8 text-center hover:border-white/50 transition-colors">
                  <input
                    type="file"
                    accept="audio/*"
                    onChange={(e) => handleFileUpload(e, 'voice')}
                    className="hidden"
                    id="voice-upload"
                  />
                  <label htmlFor="voice-upload" className="cursor-pointer">
                    <Mic className="w-12 h-12 text-white/60 mx-auto mb-4" />
                    <p className="text-white/80 mb-2">
                      {uploadedFile ? uploadedFile.name : 'Click to upload audio file'}
                    </p>
                    <p className="text-white/50 text-sm">
                      Supports MP3, WAV, M4A files
                    </p>
                  </label>
                </div>
              </div>
            )}

            {activeTab === 'image' && (
              <div>
                <label className="block text-white font-medium mb-3">
                  Upload image for deepfake/manipulation detection
                </label>
                <div className="border-2 border-dashed border-white/30 rounded-xl p-8 text-center hover:border-white/50 transition-colors">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleFileUpload(e, 'image')}
                    className="hidden"
                    id="image-upload"
                  />
                  <label htmlFor="image-upload" className="cursor-pointer">
                    <Image className="w-12 h-12 text-white/60 mx-auto mb-4" />
                    <p className="text-white/80 mb-2">
                      {uploadedFile ? uploadedFile.name : 'Click to upload image'}
                    </p>
                    <p className="text-white/50 text-sm">
                      Supports JPG, PNG, GIF files
                    </p>
                  </label>
                </div>
              </div>
            )}

            {/* Submit Button */}
            <button
              onClick={handleSubmit}
              disabled={isAnalyzing || (activeTab === 'text' ? !textInput.trim() : !uploadedFile)}
              className="w-full bg-gradient-to-r from-cyan-400 to-blue-500 hover:from-cyan-500 hover:to-blue-600 disabled:from-gray-500 disabled:to-gray-600 text-white px-8 py-4 rounded-xl font-semibold text-lg transition-all duration-300 transform hover:scale-105 disabled:scale-100 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
            >
              {isAnalyzing ? (
                <>
                  <Loader className="w-5 h-5 animate-spin" />
                  <span>Analyzing...</span>
                </>
              ) : (
                <>
                  <Upload className="w-5 h-5" />
                  <span>Start Fact Check</span>
                </>
              )}
            </button>
          </div>
        </div>

        {/* Results Section */}
        {results.length > 0 && (
          <div className="space-y-6">
            <h2 className="text-3xl font-bold text-white mb-6">Analysis Results</h2>
            
            {results.map((result) => (
              <div
                key={result.id}
                className={`bg-gradient-to-r ${getStatusColor(result.status)} backdrop-blur-sm rounded-2xl p-6 border`}
              >
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    {getStatusIcon(result.status)}
                    <div>
                      <h3 className="text-xl font-semibold text-white capitalize">
                        {result.status} Content
                      </h3>
                      <p className="text-white/70 text-sm">
                        {result.fileType} â€¢ {result.timestamp.toLocaleString()}
                      </p>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-2xl font-bold text-white mb-1">
                      {result.credibilityScore}%
                    </div>
                    <div className="text-white/70 text-sm">Credibility</div>
                  </div>
                </div>

                <div className="mb-4">
                  <h4 className="text-white font-medium mb-2">Content:</h4>
                  <p className="text-white/80 bg-black/20 rounded-lg p-3">
                    {result.content}
                    {result.fileName && (
                      <span className="block text-white/60 text-sm mt-2">
                        File: {result.fileName}
                      </span>
                    )}
                  </p>
                </div>

                <div className="mb-4">
                  <h4 className="text-white font-medium mb-2">Analysis:</h4>
                  <p className="text-white/80">{result.explanation}</p>
                </div>

                <div className="mb-6">
                  <h4 className="text-white font-medium mb-2">Sources Consulted:</h4>
                  <div className="flex flex-wrap gap-2">
                    {result.sources.map((source, index) => (
                      <span
                        key={index}
                        className="bg-white/10 text-white/80 px-3 py-1 rounded-full text-sm"
                      >
                        {source}
                      </span>
                    ))}
                  </div>
                </div>

                <button
                  onClick={() => downloadResult(result)}
                  className="bg-white/10 hover:bg-white/20 text-white px-6 py-2 rounded-lg font-medium transition-all duration-300 flex items-center space-x-2"
                >
                  <Download className="w-4 h-4" />
                  <span>Download Report</span>
                </button>
              </div>
            ))}
          </div>
        )}

        {/* Loading State */}
        {isAnalyzing && (
          <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-8 border border-white/20 text-center">
            <Loader className="w-12 h-12 text-cyan-400 animate-spin mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-white mb-2">Analyzing Content</h3>
            <p className="text-white/70">
              Our AI is cross-referencing your content with trusted sources and checking for manipulations...
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default FactChecker;